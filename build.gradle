import org.apache.commons.lang3.StringUtils

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
        classpath 'org.apache.commons:commons-lang3:3.12.0'

    }
}

plugins {
    id 'java'
    id 'war'
}

apply from: 'script.gradle'

allprojects {
    group StringUtils.capitalize("klasevich")

    repositories {
        mavenCentral()
    }
}

subprojects { //better don't use
}

project(":database") {
    repositories {
        mavenCentral()
    }
    dependencies {

    }
}

repositories {
    mavenCentral()
}
java {
    sourceCompatibility = JavaVersion.VERSION_16
    targetCompatibility = JavaVersion.VERSION_16
}

configurations {
//    Configuration configurationImpl = getByName("implementation")
    klass {
        description = "class configuration"
    }
    configurationImpl.extendsFrom(klass)

    all {
        resolutionStrategy {
            force('org.springframework:spring-aop:5.3.8')
        }
    }
}

dependencies {

    compileOnly 'jakarta.servlet:jakarta.servlet-api:5.0.0'
//    compileOnly platform('org.springframework.boot:spring-boot-dependencies:2.5.3')

//    add('implementation', [group: "org.springframework", name: "spring-webmvc", version: '5.3.9'])
//    add('implementation', "org.springframework:spring-webmvc:5.3.9")
    implementation("org.springframework:spring-webmvc:5.3.9") {
//        transitive(false)
//        exclude(group: 'org.springframework', module: 'spring-aop')
    }
    implementation('org.springframework:spring-aop:5.3.8') {
        force(true)
    }
}

configurations.runtimeClasspath.files.each {
    println it
}

jar {
    def jars = configurations.runtimeClasspath.files.collect {
        "lib/$it.name"
    }
    manifest {
        attributes 'Main-Class': 'com.klasevich.HelloWorld',
                'Class-Path': jars.join(' ')
    }
//    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
//    from (configurations.runtimeClasspath.files.collect{
//        zipTree(it)
//    })
}

task copyAllDependencies(type: Copy) {
    from(configurations.runtimeClasspath.files)
    into("$buildDir/libs/lib")
}

jar.dependsOn copyAllDependencies

war {
    archiveName "klass.war"
}


sourceSets {
    main {
        java {
            srcDir "$buildDir/generated-sources/querydsl"
        }
//        resources {
//
//        }
    }
    test {

    }
}



