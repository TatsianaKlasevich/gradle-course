plugins {
    id 'java'
}

apply from: 'script.gradle'

repositories {
    mavenCentral()
}

configurations {
    Configuration configurationImpl = getByName("implementation")
    klass {
        description = "class configuration"
    }
    configurationImpl.extendsFrom(klass)

    all {
        resolutionStrategy {
            force('org.springframework:spring-aop:5.3.8')
        }
    }
}

dependencies {
    compileOnly platform('org.springframework.boot:spring-boot-dependencies:2.5.3')

//    add('implementation', [group: "org.springframework", name: "spring-webmvc", version: '5.3.9'])
//    add('implementation', "org.springframework:spring-webmvc:5.3.9")
    implementation("org.springframework:spring-webmvc:5.3.9") {
//        transitive(false)
//        exclude(group: 'org.springframework', module: 'spring-aop')
    }
    implementation('org.springframework:spring-aop:5.3.8') {
        force(true)
    }
}

configurations.runtimeClasspath.files.each {
    println it
}

jar{
    manifest{
        attributes'Main-Class':'com.klasevich.HelloWorld'
    }
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    from (configurations.runtimeClasspath.files.collect{
        zipTree(it)
    })
}

sourceSets {
    main {
        java {
            srcDir "$buildDir/generated-sources/querydsl"
        }
//        resources {
//
//        }
    }
    test {

    }
}

//buildSrc --- id 'custom'
class CustomPlugin implements Plugin<Project> {

    @Override
    void apply(Project project) {
        addHelloTask(project)
    }

    void addHelloTask(Project project) {
        def map = [description: "Hello task", group: "dmdev", type: DefaultTask]
        project.task(map, "hello") {
            println "configuration phase. Task hello"

            doLast {
                println "execution phase, Action 1"
            }

            doFirst {
                println "execution phase, Action 2"
            }

            doLast {
                println "execution phase, Action 3"
            }
            println "task $description, group: $group, actions: ${actions.size()}"
            println "path task: $path"
        }
    }
}


